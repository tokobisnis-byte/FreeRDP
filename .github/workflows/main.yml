name: RDP

on:
  workflow_dispatch:
  schedule:
    # Otomatis jalan tiap 5 jam (auto-renew)
    - cron: '0 */5 * * *'

concurrency:
  group: rdp-session
  cancel-in-progress: false

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 355 # ~5 jam 55 menit (limit GitHub Actions 6 jam)

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop dan disable NLA
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Firewall RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        env:
          TS_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TS_AUTH_KEY --hostname=$hostname

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP port 3389 not reachable."
              exit 1
          }
          Write-Host "RDP Connectivity OK."

      - name: Notify Telegram (Session Started)
        shell: powershell
        env:
          BOT_TOKEN: "8214123519:AAEEjhxcUUFivoeJI9J-IfNlw8cLeeKmU-4"
          CHAT_ID: "87394692"
        run: |
          $ip   = $env:TAILSCALE_IP
          $user = "RDP"
          $pass = $env:RDP_PASSWORD
          $run  = $env:GITHUB_RUN_ID
          $repo = "$env:GITHUB_REPOSITORY"
          $ts   = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")

          $msg = @"
üîî *RDP Session Started*
Repo: $repo
Run ID: $run
Time: $ts

Address: $ip
Username: $user
Password: $pass

Note: Session auto-renews every 5h.
"@

          $uri = "https://api.telegram.org/bot$($env:BOT_TOKEN)/sendMessage"
          $body = @{
            chat_id = $env:CHAT_ID
            text    = $msg
            disable_web_page_preview = $true
          }
          Invoke-RestMethod -Uri $uri -Method Post -Form $body

      - name: Maintain Connection (Auto-Renew)
        shell: powershell
        env:
          BOT_TOKEN: "8214123519:AAEEjhxcUUFivoeJI9J-IfNlw8cLeeKmU-4"
          CHAT_ID: "87394692"
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"

          $minutes = 350
          for ($i = 0; $i -lt $minutes; $i++) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP Active - Auto-renew in progress..."
              Start-Sleep -Seconds 60
          }

          try {
              $msg2 = "‚è≥ RDP session ending soon. New one will auto-start via cron.`nCurrent IP: $env:TAILSCALE_IP"
              $uri2 = "https://api.telegram.org/bot$($env:BOT_TOKEN)/sendMessage"
              $body2 = @{ chat_id = $env:CHAT_ID; text = $msg2; disable_web_page_preview = $true }
              Invoke-RestMethod -Uri $uri2 -Method Post -Form $body2
          } catch {
              Write-Warning "Telegram end-notify failed: $_"
          }
