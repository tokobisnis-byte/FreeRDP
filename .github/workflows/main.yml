name: RDP Enhanced

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'   # primary every 4 hours
    - cron: '30 */4 * * *'  # backup 30 minutes later

concurrency:
  group: rdp-enhanced
  cancel-in-progress: false

env:
  MAX_RUNTIME: 330
  RDP_USERNAME: "RDPUser"

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: ${{ env.MAX_RUNTIME }}

    steps:
      - name: Check Runner Resources
        shell: powershell
        run: |
          echo "🖥️ Runner Information:"
          systeminfo | findstr /C:"Total Physical Memory" /C:"Available Physical Memory"
          Get-WmiObject -Class Win32_LogicalDisk | Format-Table DeviceID, Size, FreeSpace

      - name: Configure Enhanced RDP Settings
        shell: powershell
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force

          # Security configs
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 1 -Force

          # Optimize performance
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' `
                           -Name "MaxInstanceCount" -Value 2 -Force

          # Firewall
          $ruleName = "RDP-Tailscale-$env:GITHUB_RUN_ID"
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>&1 | Out-Null
          netsh advfirewall firewall delete rule name=$ruleName 2>&1 | Out-Null
          netsh advfirewall firewall add rule name=$ruleName dir=in action=allow protocol=TCP localport=3389

          try {
              Restart-Service -Name TermService -Force
              Write-Host "✅ RDP Service restarted successfully"
          } catch {
              Write-Warning "Failed to restart TermService, retrying..."
              Start-Service -Name TermService
          }

      - name: Create Secure RDP User
        id: create-user
        shell: powershell
        run: |
          # Cleanup old user
          $existing = Get-LocalUser -Name "$env:RDP_USERNAME" -ErrorAction SilentlyContinue
          if ($existing) { Remove-LocalUser -Name "$env:RDP_USERNAME" }

          # Generate password
          Add-Type -AssemblyName System.Web
          $password = [System.Web.Security.Membership]::GeneratePassword(18, 4)
          while ($password -notmatch '[A-Z]' -or $password -notmatch '[a-z]' -or $password -notmatch '[0-9]' -or $password -notmatch '[^a-zA-Z0-9]') {
              $password = [System.Web.Security.Membership]::GeneratePassword(18, 4)
          }

          # Create user
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "$env:RDP_USERNAME" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USERNAME"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USERNAME"
          Set-LocalUser -Name "$env:RDP_USERNAME" -UserMayChangePassword $false

          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          echo "::add-mask::$password"
          Write-Host "✅ User created: $env:RDP_USERNAME"

      - name: Install Tailscale
        shell: powershell
        run: |
          Write-Host "📦 Installing Tailscale..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file -TimeoutSec 60
          Start-Process msiexec.exe -ArgumentList "/i", "`"$file`"", "/quiet", "/norestart" -Wait
          Remove-Item $file -Force
          Write-Host "✅ Tailscale Installed"

      - name: Connect to Tailscale
        shell: powershell
        env:
          TS_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $hostName = "gh-rdp-$env:GITHUB_RUN_ID"
          Write-Host "🔗 Connecting to Tailscale as: $hostName"
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey=$env:TS_AUTH_KEY --hostname=$hostName --accept-routes --accept-dns --reset

          $tsIP = $null
          for ($i=0; $i -lt 10; $i++) {
              $tsIP = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
              if ($tsIP) { break }
              Write-Host "⏳ Waiting for Tailscale IP... ($i/10)"
              Start-Sleep -Seconds 5
          }

          if (-not $tsIP) {
              Write-Error "❌ Tailscale IP not assigned"
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "::add-mask::$tsIP"
          Write-Host "✅ Connected to Tailscale: $tsIP"

      - name: Notify Telegram (RDP Ready)
        shell: powershell
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          $ip = $env:TAILSCALE_IP
          $user = $env:RDP_USERNAME
          $pass = $env:RDP_PASSWORD
          $msg = @"
🚀 *RDP Session Started*
───────────────────────
*IP:* `$ip`
*User:* `$user`
*Password:* `$pass`
⏰ Auto-renew every 4 hours
"@
          $uri = "https://api.telegram.org/bot$($env:BOT_TOKEN)/sendMessage"
          $body = @{ chat_id = $env:CHAT_ID; text = $msg; parse_mode = "Markdown" }
          Invoke-RestMethod -Uri $uri -Method Post -Body ($body | ConvertTo-Json) -ContentType "application/json"
          Write-Host "✅ Telegram notification sent"

      - name: Maintain Connection (Auto-Renew)
        shell: powershell
        run: |
          Write-Host "`n=== RDP SESSION ACTIVE ==="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "User: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==========================`n"

          for ($i=0; $i -lt $env:MAX_RUNTIME; $i++) {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] 🟢 Session alive..."
              Start-Sleep -Seconds 60
          }
          Write-Host "⏹️ Session ending. Cron will restart automatically."

